axel rauschmayer, 2ality.com 
prototype chain: share data and behavior, create similair objects, save memory 
"https://www.youtube.com/watch?v=VJOTcUsD2kA&index=6&list=PLw5h0DiJ-9PBX8iK6oSkdM_f5KZ9lnofh" 
4 different javascript engines: google microsoft apple mozilla 
javascript specification 
this is only used in functions 
this is context sensitive , it is bound to the context at call time 
new can oly be applied to constructor functions 
new does 4 things: 1 - create object, 2 - set object prototype , 3 - call constructor fn of protptype, 4 return object 

new operator:

var crockford = new Person('Do not forget the semicolon');

var obj = {}  // 1 create object
Object.setPrototpyeOf(obj, constructor.prototype) // 2 set object prototype from constructor.prototype // Person constructor function
var argsArray = Array.from(arguments) // make an array from arguments object to be able to call slice on it and get the constructor function
or old fashion way:
var argsArray = Array.prototype.slice.apply(arguments) // converts arguments object into array object
constructor.apply(obj, argsArray.slice(1) // call constructor function // wich is the second parameter in functions arguments object__proto__ on Obj and Object.getPrototypeOf(Obj) output the same result 
everything in javscript is created with a function 
nearly everything in javascript is an object 
if a constructor function is not called with new the result is undefined 
with the check: 'if '(this is instanceof Fubar '(constructor fn)' do normal thing else new 'Fubar(par1,par2)' 
rest api, data represented as resources 
GET /bookmarks - all bookmarks 
use http verbs to indicate the action on the resource 
